package com.sdyin.dsag.arithmetic.alg.leetcode;

/**
 * @Description: leetcode 714.买卖股票的最佳时期含手续费
 * //给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。
 * //
 * // 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
 * //
 * // 返回获得利润的最大值。
 * //
 * // 注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。
 * //
 * // 示例 1:
 * //
 * // 输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
 * //输出: 8
 * //解释: 能够达到的最大利润:
 * //在此处买入prices[0] = 1
 * //在此处卖出 prices[3] = 8
 * //在此处买入 prices[4] = 4
 * //在此处卖出 prices[5] = 9
 * //总利润:((8 - 1) - 2) + ((9 - 4) - 2) = 8.
 * //
 * // 注意:
 * //
 * //
 * // 0 < prices.length <= 50000.
 * // 0 < prices[i] < 50000.
 * // 0 <= fee < 50000.
 * //
 * // Related Topics 贪心算法 数组 动态规划
 * // 👍 327 👎 0
 * @Author: liuye
 * @time: 2020/12/17$ 上午9:53$
 */
public class MaxProfit_714 {

    /**
     * 状态转移方程：
     *
     * 对于dp[i][0]（不持有股票），有两种情况：
     *
     * 保持不变：即第i-1天结束时也没有持有股票，所以收益保持不变，dp[i][0] = dp[i - 1][0]。
     * 卖出股票：第i-1天结束时持有股票，第i天卖出，因此收益是dp[i - 1][1] + prices[i] - fee。
     * dp[i - 1][1]：第i-1天持有股票的收益。
     * prices[i] - fee：卖出股票所得减去手续费。
     * 两者取较大值：dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i] - fee)。
     * 对于dp[i][1]（持有股票），同样有两种情况：
     *
     * 保持不变：即第i-1天结束时持有股票，所以收益保持不变，dp[i][1] = dp[i - 1][1]。
     * 买入股票：第i-1天结束时没有持有股票，第i天买入，因此收益是dp[i - 1][0] - prices[i]。
     * dp[i - 1][0]：第i-1天不持有股票的收益。
     * prices[i]：买入股票所需花费。
     * 两者取较大值：dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])。
     * 最终返回dp[n - 1][0]，表示最后一天不持有股票的最大收益，即最终的最大利润。
     *
     * @param prices
     * @param fee
     * @return
     */
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;

        int[][] dp = new int[n][2];
        //初始值
        // 表示第1天结束时，不持有股票的最大收益。
        dp[0][0] = 0;
        // 表示第1天结束时，持有股票的最大收益。因为买入了，所以是负值
        dp[0][1] = -prices[0];
        for (int i = 1; i < n; i++) {
            /**
             * 状态转移方程: 两种状态
             * 第i天不持有的最大利润：MAX(第i-1天不持有的最大利润，第i-1天持有的最大利润+第i天卖出的利润-手续费)
             * dp[i][0]=max(dp[i−1][0],dp[i−1][1]+prices[i]−fee)
             *
             * 第i天持有的最大利润： MAX(第i-1天持有的的最大利润，第i-1天不持有的最大利润-第i天买入的价格)
             * dp[i][1]=max(dp[i−1][1],dp[i−1][0]−prices[i])
             */
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i] - fee);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }
        return dp[n - 1][0];
    }
}
